package controller;

import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;

import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.Stage;
import javafx.stage.Window;
import javafx.stage.WindowEvent;
import util.SessionManager;
import java.io.ByteArrayInputStream;
import bbdd.Pokedex;
import util.PokedexManager;


public class CapturaController implements Initializable {
	
	private PokedexManager pokedexManager;


    @FXML
    private Button btnCaptura;

    @FXML
    private Button btnReturn;
    
    @FXML
    private ImageView imageViewCaptura;
    

    private List<String> listaPokemon;

    
    
    @FXML
    void Capturar(ActionEvent event) {
        listaPokemon = new ArrayList<>();

        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/getbacktowork", "root", "")) {
            String sql = "SELECT NOM_POKEMON, NUM_POKEDEX FROM pokedex";
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                try (ResultSet rs = stmt.executeQuery()) {
                    while (rs.next()) {
                        listaPokemon.add(rs.getString("NOM_POKEMON"));
                    }
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error");
            alert.setHeaderText(null);
            alert.setContentText("Error al conectar a la base de datos o al ejecutar la consulta.");
            alert.showAndWait();
            return;
        }

        if (!listaPokemon.isEmpty()) {
            Random random = new Random();
            int indice = random.nextInt(listaPokemon.size());
            String pokemonCapturado = listaPokemon.get(indice);

            // Obtener el ID del entrenador desde la sesión
            int idEntrenador = SessionManager.getEntrenador().getId_entrenador();

            try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/getbacktowork", "root", "")) {
                Statement instruccion = conn.createStatement();

                ResultSet resultado = instruccion.executeQuery("SELECT MAX(ID_POKEMON) FROM pokemon");
                int ultimoID = 0;
                if (resultado.next()) {
                    ultimoID = resultado.getInt(1);
                }

                // Obtener el NUM_POKEDEX del Pokémon capturado
                int numPokedex = 0;
                try (PreparedStatement stmt = conn.prepareStatement("SELECT NUM_POKEDEX FROM pokedex WHERE NOM_POKEMON = ?")) {
                    stmt.setString(1, pokemonCapturado);
                    try (ResultSet rs = stmt.executeQuery()) {
                        if (rs.next()) {
                            numPokedex = rs.getInt("NUM_POKEDEX");
                        }
                    }
                }

                String motePokemon = pokemonCapturado;
                int nuevoID = ultimoID + 1;
                int ataque = (int) (Math.random() * 10) + 1;
                int ataqueEspecial = (int) (Math.random() * 10) + 1;
                int defensa = (int) (Math.random() * 10) + 1;
                int defensaEspecial = (int) (Math.random() * 10) + 1;
                int velocidad = (int) (Math.random() * 10) + 1;
                int nivel = 1;
                int fertilidad = 5;
                String sexo = Math.random() < 0.5 ? "M" : "F";
                String estado = null;
                int experiencia = 0;
                int vitalidad = (int) (Math.random() * 51) + 50;
                int idObjeto = 0;

                String insertQuery = "INSERT INTO pokemon (ID_POKEMON, MOTE, CAJA, ATAQUE, AT_ESPECIAL, DEFENSA, DEF_ESPECIAL, VELOCIDAD, NIVEL, FERTILIDAD, SEXO, ESTADO, EXPERIENCIA, VITALIDAD, NUM_POKEDEX, ID_ENTRENADOR, ID_OBJETO) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                PreparedStatement insertStatement = conn.prepareStatement(insertQuery);
                insertStatement.setInt(1, nuevoID);
                insertStatement.setString(2, motePokemon);
                insertStatement.setInt(3, 1); // Valor fijo de 1 para la columna Caja
                insertStatement.setInt(4, ataque);
                insertStatement.setInt(5, ataqueEspecial);
                insertStatement.setInt(6, defensa);
                insertStatement.setInt(7, defensaEspecial);
                insertStatement.setInt(8, velocidad);
                insertStatement.setInt(9, nivel);
                insertStatement.setInt(10, fertilidad);
                insertStatement.setString(11, sexo);
                insertStatement.setString(12, estado);
                insertStatement.setInt(13, experiencia);
                insertStatement.setInt(14, vitalidad);
                insertStatement.setInt(15, numPokedex); // Aquí se usa el NUM_POKEDEX correspondiente
                insertStatement.setInt(16, idEntrenador);
                insertStatement.setInt(17, idObjeto);

                int filasInsertadas = insertStatement.executeUpdate();
                if (filasInsertadas > 0) {
                    Alert alert = new Alert(Alert.AlertType.INFORMATION);
                    alert.setTitle("¡Pokémon Capturado!");
                    alert.setHeaderText(null);
                    alert.setContentText("Has capturado a: " + pokemonCapturado);
                    alert.showAndWait();
                } else {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Error");
                    alert.setHeaderText(null);
                    alert.setContentText("Ha ocurrido un error al insertar el Pokémon.");
                    alert.showAndWait();
                }

            } catch (SQLException e) {
                System.out.println("Error de SQL: " + e.getMessage());
            }

        } else {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error");
            alert.setHeaderText(null);
            alert.setContentText("No se encontraron Pokémon en la base de datos.");
            alert.showAndWait();
        }
    }

    @FXML
    void irMenu(ActionEvent event) {
        loadStage("../view/MENU-SCENE.fxml", event);
    }

    @Override
    public void initialize(URL arg0, ResourceBundle arg1) {
        listaPokemon = new ArrayList<>();
        pokedexManager = new PokedexManager(); // Inicialización del objeto PokedexManager
        cambiarImagen(1);
    }

    private void loadStage(String url, Event event) {
        try {
            Object eventSource = event.getSource();
            Node sourceAsNode = (Node) eventSource;
            Scene oldScene = sourceAsNode.getScene();
            Window window = oldScene.getWindow();
            Stage stage = (Stage) window;
            stage.hide();

            Parent root = FXMLLoader.load(getClass().getResource(url));
            Scene scene = new Scene(root);

            Stage newStage = new Stage();
            newStage.setScene(scene);
            newStage.show();

            newStage.setOnCloseRequest(new EventHandler<WindowEvent>() {
                @Override
                public void handle(WindowEvent event) {
                    Platform.exit();
                }
            });

        } catch (IOException ex) {
            Logger.getLogger(LoginController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    private void cambiarImagen(int id_pokemon) {
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/getbacktowork", "root", "")) {
            // Ejecutar una consulta para obtener la imagen de la base de datos
            String sql = "SELECT imagen FROM pokedex WHERE num_pokedex = ?";
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setInt(1, id_pokemon); // Aquí necesitas proporcionar el id de la imagen que deseas recuperar
                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {
                        // Recuperar la imagen como un conjunto de bytes desde la base de datos
                        byte[] bytesImagen = rs.getBytes("imagen");

                        // Convertir los bytes de la imagen en un objeto Image de JavaFX
                        Image imagen = new Image(new ByteArrayInputStream(bytesImagen));

                        // Establecer la imagen en el ImageView
                        imageViewCaptura.setImage(imagen);
                    }
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            // Manejo de errores
        }
    }
    
}
